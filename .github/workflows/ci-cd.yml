name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests and Linting
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Lint backend code with flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        cd backend
        black --check .
    
    - name: Run backend tests
      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
      run: |
        cd backend
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests and Linting
  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test -- --coverage --run
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/dist/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Linter (Python)
      run: |
        pip install bandit
        bandit -r backend/ -f json -o bandit-report.json || true
    
    - name: Run npm audit (Frontend)
      run: |
        cd frontend
        npm audit --audit-level moderate || true

  # Build and Deploy (Disabled for now)
  # build-and-deploy:
  #   runs-on: ubuntu-latest
  #   needs: [backend-tests, frontend-tests, security-scan]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v2
  #   
  #   - name: Build Backend Docker Image
  #     run: |
  #       docker build -t docbot-backend:latest -f backend/Dockerfile backend/
  #   
  #   - name: Build Frontend Docker Image
  #     run: |
  #       docker build -t docbot-frontend:latest -f frontend/Dockerfile frontend/
  #   
  #   - name: Run Docker Compose Tests
  #     run: |
  #       docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit
  #       docker-compose -f docker-compose.test.yml down
  #   
  #   # Uncomment and configure for your deployment platform
  #   # - name: Deploy to Production
  #   #   run: |
  #   #     echo "Deploy to your preferred platform (Heroku, AWS, GCP, etc.)"

  # Performance Testing (Disabled for now)
  # performance-test:
  #   runs-on: ubuntu-latest
  #   needs: [build-and-deploy]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Setup Node.js for Lighthouse
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20'
  #   
  #   - name: Install Lighthouse CI
  #     run: npm install -g @lhci/cli
  #   
  #   - name: Run Lighthouse CI
  #     run: |
  #       # Add your deployed app URL here
  #       # lhci autorun --upload.target=temporary-public-storage
  #       echo "Configure Lighthouse CI with your deployed app URL"

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify on Success
      if: success()
      run: echo "✅ All tests passed! Ready for deployment."
    
    - name: Notify on Failure
      if: failure()
      run: |
        echo "❌ Tests failed! Check the logs."
        exit 1
